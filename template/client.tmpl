package {{ .SnakeCaseName }}

import (
    "fmt"
    "sync"

    "github.com/grpc-ecosystem/grpc-opentracing/go/otgrpc"
    "github.com/lileio/lile"
    opentracing "github.com/opentracing/opentracing-go"
    "google.golang.org/grpc"
)

var (
	cm = &sync.Mutex{}
	Client {{ .CamelCaseName }}Client
)

func Get{{ .CamelCaseName }}Client() {{ .CamelCaseName }}Client {
	cm.Lock()
	defer cm.Unlock()

	if Client != nil {
		return Client
	}

        serviceURL := lile.GlobalService().URLForService({{ .DNSName }})

	// We don't need to error here, as this creates a pool and connections
	// will happen later
	conn, _ := grpc.Dial(
		serviceURL,
		grpc.WithInsecure(),
		grpc.WithUnaryInterceptor(
			otgrpc.OpenTracingClientInterceptor(opentracing.GlobalTracer()),
		))

	cli := New{{ .CamelCaseName }}Client(conn)
	Client = cli
	return cli
}
